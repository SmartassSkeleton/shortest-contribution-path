{"version":3,"sources":["../src/functions.js"],"names":["reposToContributorsGenerator","usersToReposGenerator","getUsersByRepo","name","getContributors","getReposbyUser","opt","getForUser","checkIntersection","user1RepoSet","user2Repos","user2RepoSet","Set","map","repo","repo_id","intersection","filter","has","x","size","repos","i","length","users","getHops","counter","found","reposGenerator","owner","contributors","next","reposUserNames","user2ReposChildren","done","value","user","usersGenerator","push","prototype","concat","preHops","user1","user2","user1Repos","user1ReposSet"],"mappings":"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","file":"functions.js","sourcesContent":["import { repos } from \"./github\";\nimport \"babel-polyfill\";\n\nfunction getUsersByRepo(name){\n\treturn repos.getContributors(name);\n}\n\nfunction getReposbyUser(opt){\n\treturn repos.getForUser(opt);\n}\n\nfunction checkIntersection(user1RepoSet, user2Repos) {\n\tconst user2RepoSet = new Set(user2Repos.map(repo => repo.repo_id));\n\tconst intersection = new Set(\n\t\t[...user1RepoSet].filter(x => user2RepoSet.has(x))\n\t);\n\n\treturn intersection.size !== 0;\n}\n\nfunction* reposToContributorsGenerator(repos) {\n\tfor (let i = 0; i < repos.length; i++) {\n\t\tyield getUsersByRepo(repos[i]);\n\t}\n}\n\nfunction* usersToReposGenerator(users) {\n\tfor (let i = 0; i < users.length; i++) {\n\t\tyield getReposbyUser(users[i]);\n\t}\n}\n\nfunction getHops(user1RepoSet, user2Repos, counter) {\n\tlet found = false;\n\tconst reposGenerator = reposToContributorsGenerator(\n\t\tuser2Repos.map(repo => ({ owner: repo.owner, repo: repo.repo }))\n\t);\n\tlet contributors = reposGenerator.next();\n\tlet reposUserNames;\n\tlet user2ReposChildren = [];\n\n\twhile (!contributors.done && !found) {\n\t\tcounter++;\n\t\treposUserNames = contributors.value.map(user => user.name);\n\t\tconst usersGenerator = usersToReposGenerator(reposUserNames);\n\t\tlet repos = usersGenerator.next();\n\n\t\twhile (!repos.done && !found) {\n\t\t\tif (repos.value != \"undefined\") user2ReposChildren.push(repos.value);\n\t\t\tfound = checkIntersection(user1RepoSet, repos.value);\n\t\t\trepos = usersGenerator.next();\n\t\t}\n\n\t\tcontributors = reposGenerator.next();\n\t}\n\tif (found) return counter;\n\n\treturn getHops(\n\t\tuser1RepoSet,\n\t\tArray.prototype.concat(...user2ReposChildren),\n\t\tcounter\n\t);\n}\n\nfunction preHops(user1, user2) {\n\tconst user1Repos = getReposbyUser(user1);\n\tconst user2Repos = getReposbyUser(user2);\n\n\tconst user1ReposSet = new Set(user1Repos.map(repo => repo.repo_id));\n\tif (checkIntersection(user1ReposSet, user2Repos)) return 1;\n\n\treturn getHops(user1ReposSet, user2Repos, 1);\n}\n\n\nexport { preHops };\n"]}